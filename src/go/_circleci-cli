#compdef circleci-cli

# -----------------------------------------------------------------------------
# The BSD-3-Clause License
#
# Copyright (c) 2018, Koichi Shiraishi
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
# * Neither the name of que nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
# -----------------------------------------------------------------------------
#
# github.com/CircleCI-Public/circleci-cli
#
# -----------------------------------------------------------------------------
#
# Use CircleCI from the command line.
#
# Usage:
#   circleci [command]
#
# Available Commands:
#   build       Run a build
#   config      Operate on build config files
#   diagnostic  Check the status of your CircleCI CLI.
#   help        Help about any command
#   namespace   Operate on namespaces
#   orb         Operate on orbs
#   query       Query the CircleCI GraphQL API using input from stdin.
#   setup       Setup the CLI with your credentials
#   update      Update the tool
#   version     Display version information
#
# Flags:
#   -e, --endpoint string   the endpoint of your CircleCI GraphQL API (default "https://circleci.com/graphql-unstable")
#   -h, --help              help for circleci
#   -t, --token string      your token for using CircleCI
#   -v, --verbose           Enable verbose logging.
#
# Use "circleci [command] --help" for more information about a command.
#
# -----------------------------------------------------------------------------
#
# Run a build
#
# Usage:
#   circleci build [flags]
#   circleci build [command]
#
# Available Commands:
#   update      Update the build agent to the latest version
#
# Flags:
#   -h, --help   help for build
#
# Global Flags:
#   -e, --endpoint string   the endpoint of your CircleCI GraphQL API (default "https://circleci.com/graphql-unstable")
#   -t, --token string      your token for using CircleCI
#   -v, --verbose           Enable verbose logging.
#
# Use "circleci build [command] --help" for more information about a command.
#
# -----------------------------------------------------------------------------
#
# Operate on build config files
#
# Usage:
#   circleci config [command]
#
# Available Commands:
#   collapse    Collapse your CircleCI configuration to a single file
#   expand      Expand the config.
#   validate    Check that the config file is well formed.
#
# Flags:
#   -h, --help   help for config
#
# Global Flags:
#   -e, --endpoint string   the endpoint of your CircleCI GraphQL API (default "https://circleci.com/graphql-unstable")
#   -t, --token string      your token for using CircleCI
#   -v, --verbose           Enable verbose logging.
#
# Use "circleci config [command] --help" for more information about a command.
#
# -----------------------------------------------------------------------------
#
# Check the status of your CircleCI CLI.
#
# Usage:
#   circleci diagnostic [flags]
#
# Flags:
#   -h, --help   help for diagnostic
#
# Global Flags:
#   -e, --endpoint string   the endpoint of your CircleCI GraphQL API (default "https://circleci.com/graphql-unstable")
#   -t, --token string      your token for using CircleCI
#   -v, --verbose           Enable verbose logging.
#
# -----------------------------------------------------------------------------
#
# Help provides help for any command in the application.
# Simply type circleci help [path to command] for full details.
#
# Usage:
#   circleci help [command] [flags]
#
# Flags:
#   -h, --help   help for help
#
# Global Flags:
#   -e, --endpoint string   the endpoint of your CircleCI GraphQL API (default "https://circleci.com/graphql-unstable")
#   -t, --token string      your token for using CircleCI
#   -v, --verbose           Enable verbose logging.
#
# -----------------------------------------------------------------------------
#
# Operate on namespaces
#
# Usage:
#   circleci namespace [command]
#
# Available Commands:
#   create      create an namespace
#
# Flags:
#   -h, --help   help for namespace
#
# Global Flags:
#   -e, --endpoint string   the endpoint of your CircleCI GraphQL API (default "https://circleci.com/graphql-unstable")
#   -t, --token string      your token for using CircleCI
#   -v, --verbose           Enable verbose logging.
#
# Use "circleci namespace [command] --help" for more information about a command.
#
# -----------------------------------------------------------------------------
#
# Operate on orbs
#
# Usage:
#   circleci orb [command]
#
# Available Commands:
#   create      create an orb
#   expand      expand an orb.yml
#   list        List orbs
#   publish     publish a version of an orb
#   source      Show the source of an orb
#   validate    validate an orb.yml
#
# Flags:
#   -h, --help   help for orb
#
# Global Flags:
#   -e, --endpoint string   the endpoint of your CircleCI GraphQL API (default "https://circleci.com/graphql-unstable")
#   -t, --token string      your token for using CircleCI
#   -v, --verbose           Enable verbose logging.
#
# Use "circleci orb [command] --help" for more information about a command.
#
# -----------------------------------------------------------------------------
#
# Query the CircleCI GraphQL API using input from stdin.
#
# Usage:
#   circleci query [flags]
#
# Flags:
#   -h, --help   help for query
#
# Global Flags:
#   -e, --endpoint string   the endpoint of your CircleCI GraphQL API (default "https://circleci.com/graphql-unstable")
#   -t, --token string      your token for using CircleCI
#   -v, --verbose           Enable verbose logging.
#
# -----------------------------------------------------------------------------
#
# Setup the CLI with your credentials
#
# Usage:
#   circleci setup [flags]
#
# Flags:
#   -h, --help   help for setup
#
# Global Flags:
#   -e, --endpoint string   the endpoint of your CircleCI GraphQL API (default "https://circleci.com/graphql-unstable")
#   -t, --token string      your token for using CircleCI
#   -v, --verbose           Enable verbose logging.
#
# -----------------------------------------------------------------------------
#
# Update the tool
#
# Usage:
#   circleci update [command]
#
# Available Commands:
#   check       Check if there are any updates available
#   install     Update the tool to the latest version
#
# Flags:
#   -h, --help   help for update
#
# Global Flags:
#   -e, --endpoint string   the endpoint of your CircleCI GraphQL API (default "https://circleci.com/graphql-unstable")
#   -t, --token string      your token for using CircleCI
#   -v, --verbose           Enable verbose logging.
#
# Use "circleci update [command] --help" for more information about a command.
#
# -----------------------------------------------------------------------------
#
# Display version information
#
# Usage:
#   circleci version [flags]
#
# Flags:
#   -h, --help   help for version
#
# Global Flags:
#   -e, --endpoint string   the endpoint of your CircleCI GraphQL API (default "https://circleci.com/graphql-unstable")
#   -t, --token string      your token for using CircleCI
#   -v, --verbose           Enable verbose logging.
#
# -----------------------------------------------------------------------------

function _circleci-cli() {
  local context curcontext=$curcontext state line ret=1
  declare -A opt_args

  local -a commands
  commands=(
  'build:Run a build'
  'config:Operate on build config files'
  'diagnostic:Check the status of your CircleCI CLI.'
  'help:Help about any command'
  'namespace:Operate on namespaces'
  'orb:Operate on orbs'
  'query:Query the CircleCI GraphQL API using input from stdin.'
  'setup:Setup the CLI with your credentials'
  'update:Update the tool'
  'version:Display version information'
  )

  local -a _global_flags
  _global_flags=(
  {-e,--endpoint}'[the endpoint of your CircleCI GraphQL API]:endpoint'
  {-h,--help}'[help for circleci]'
  {-t,--token}'[your token for using CircleCI]:token'
  {-v,--verbose}'[Enable verbose logging.]'
  )

  _arguments -C \
    "1: :{_describe 'circleci-cli command' commands}" \
    '*:: :->args' \
    && ret=0

  case $words[1] in
    build)
      local -a build_cmds
      build_cmds=(
      'update:Update the build agent to the latest version'
      )

      _arguments \
        "1: :{_describe 'build subcommand' build_cmds}" \
        '*:: :->args' \
        ${_global_flags[@]}

      case $words[1] in
        update)
          _arguments \
            ${_global_flags[@]}
          ;;
      esac
      ;;

    config)
      local -a config_cmds
      config_cmds=(
      'collapse:Collapse your CircleCI configuration to a single file'
      'expand:Expand the config.'
      'validate:Check that the config file is well formed.'
      )

      _arguments \
        "1: :{_describe 'build subcommand' build_cmds}" \
        '*:: :->args' \
        ${_global_flags[@]}

      case $words[1] in
        collapse)
          _arguments \
            ${_global_flags[@]} \
            "*:path:_files"
          ;;

        expand)
          _arguments \
            ${_global_flags[@]} \
            "*:config.yml:_files"
          ;;

        validate)
          _arguments \
            ${_global_flags[@]} \
            "*:config.yml:_files"
          ;;
      esac
      ;;

    namespace)
      local -a namespace_cmds
      namespace_cmds=(
      'create:create an namespace'
      )

      _arguments \
        "1: :{_describe 'namespace subcommand' namespace_cmds}" \
        '*:: :->args' \
        ${_global_flags[@]}

      case $words[1] in
        create)
          _arguments \
            "1:name" \
            "2:vcs" \
            "3:org-name" \
            ${_global_flags[@]}
          ;;
      esac
      ;;

    orb)
      local -a orb_cmds
      orb_cmds=(
      'create:create an orb'
      'expand:expand an orb.yml'
      'list:List orbs'
      'publish:publish a version of an orb'
      'source:Show the source of an orb'
      'validate:validate an orb.yml'
      )

      _arguments \
        "1: :{_describe 'orb subcommand' orb_cmds}" \
        '*:: :->args' \
        ${_global_flags[@]}

      case $words[1] in
        create)
          _arguments \
            ${_global_flags[@]} \
            "*:<namespace>/<name>"
          ;;

        expand)
          _arguments \
            ${_global_flags[@]} \
            "*:orb.yml:_files"
          ;;

        list)
          _arguments \
            ${_global_flags[@]} \
            "*:<namespace>/<name>"
          ;;

        publish)
          _arguments \
            ${_global_flags[@]} \
            "1:<namespace>/<name>" \
            "2:orb.yml:_files"
          ;;

        source)
          _arguments \
            ${_global_flags[@]} \
            "*:<namespace>/<name>"
          ;;

        validate)
          _arguments \
            ${_global_flags[@]} \
            "*:orb.yml:_files"
          ;;
      esac
      ;;

    update)
      local -a update_cmds
      update_cmds=(
      'check:Check if there are any updates available'
      'install:Update the tool to the latest version'
      )

      _arguments \
        "1: :{_describe 'update subcommand' update_cmds}" \
        '*:: :->args' \
        ${_global_flags[@]}

      case $words[1] in
        (check|install)
          _arguments \
            ${_global_flags[@]}
          ;;
      esac
      ;;

    (diagnostic|query|setup|version)
      _arguments \
        ${_global_flags[@]}
      ;;
  esac

  return ret
}

_circleci-cli "$*"

# vim:ft=zsh:et:sts=2:sw=2
